<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://huyifu.github.io</id>
    <title>古月的blog</title>
    <updated>2021-03-17T06:57:55.945Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://huyifu.github.io"/>
    <link rel="self" href="https://huyifu.github.io/atom.xml"/>
    <subtitle>123455
</subtitle>
    <logo>https://huyifu.github.io/images/avatar.png</logo>
    <icon>https://huyifu.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, 古月的blog</rights>
    <entry>
        <title type="html"><![CDATA[[Javascript]cssText使用]]></title>
        <id>https://huyifu.github.io/post/javascriptcsstext-shi-yong/</id>
        <link href="https://huyifu.github.io/post/javascriptcsstext-shi-yong/">
        </link>
        <updated>2021-03-15T13:33:07.000Z</updated>
        <content type="html"><![CDATA[<p>#引言<br>
再写小米官网时候 遇到了需要在js中添加样式的问题<br>
之前一直是用xxx.style.width(or height 等等) 想添加上边框时用不了<br>
border-top: 1px solid #ccc;<br>
看到了xxx.style.cssText 使用方法便头一次看到了新的css添加方法<br>
便使用</p>
<pre><code>dropDownbox[0].style.cssText = 'border-top: 1px solid #ccc;';
</code></pre>
<p>结果又有bug 搜索后总结使用方法如下：</p>
<ul>
<li>cssText，DOMString类型</li>
<li>cssText特性必须返回序列化的CSS规则。</li>
<li>当设置cssText特性时运行这些步骤：
<ol>
<li>解析其值。</li>
<li>如果解析失败则终止运行。</li>
<li>如果新对象的type并不匹配当前对象的type则抛出&quot;InvalidModificationError&quot;异常。</li>
<li>替换当前对象为新对象。<br>
——以上摘自<a href="https://segmentfault.com/a/1190000000703778">https://segmentfault.com/a/1190000000703778</a></li>
</ol>
</li>
</ul>
<h3 id="第四条会导致新对象覆盖目标元素之前所有的样式继承不算">第四条会导致新对象覆盖目标元素之前所有的样式（继承不算）</h3>
<p>例：<br>
#xxx{width:200px;height:300px;}</p>
<pre><code>var xxx-point = document.getElementById('xxx');
xxx-point.style.cssText = 'width:300px; ';
</code></pre>
<p>最终.xxx{width:300px;}</p>
<p>如果想单独添加某个css样式 方法如下:<br>
#xxx{width:200px;height:300px;}</p>
<pre><code>var xxx-point = document.getElementById('xxx');
var xxx_style = xxx-point.style.cssText;
xxx_style += 'border-top: 1px solid #ccc;';
xxx-point.style.cssText = xxx_style;
</code></pre>
<h3 id="ie678-返回全为大写而且最后没有分号">IE6/7/8 返回全为大写而且最后没有分号</h3>
<p>#xxx{width:200px;height:300px;}<br>
则cssText 为'WIDTH:200PX;HEIGHT:300PX'<br>
故若考虑 IE6/7/8 兼容则需</p>
<pre><code>var xxx-point = document.getElementById('xxx');
var xxx_style = xxx-point.style.cssText.toLowerCase(); //转化为小写
xxx_style  = 'border-top: 1px solid #ccc;'+xxx_style; //如果没有分号不影响
xxx-point.style.cssText = xxx_style;
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[document.body.scrollTop与document.documentElement.scrollTop兼容]]></title>
        <id>https://huyifu.github.io/post/documentbodyscrolltop-yu-documentdocumentelementscrolltop-jian-rong/</id>
        <link href="https://huyifu.github.io/post/documentbodyscrolltop-yu-documentdocumentelementscrolltop-jian-rong/">
        </link>
        <updated>2021-03-13T05:04:57.000Z</updated>
        <content type="html"><![CDATA[<p>#scrollTop<br>
scrollTop:设置或获取位于对象最顶端和窗口中可见内容的最顶端之间的距离</p>
<p>#获取当前页面的滚动条纵坐标位置<br>
使用document.documentElement.scrollTop;</p>
<p>#网页被卷去的高： document.body.scrollTop;<br>
document.body.scrollTop 可以获取到当前页面被卷去的高度。</p>
<p>#不同浏览器兼容性不同<br>
IE6/7/8：<br>
可以使用 document.documentElement.scrollTop；<br>
IE9及以上：<br>
可以使用window.pageYOffset或者document.documentElement.scrollTop<br>
Safari:<br>
safari： window.pageYOffset 与document.body.scrollTop都可以；<br>
Firefox:<br>
火狐等等相对标准些的浏览器就省心多了，直接用window.pageYOffset 或者 document.documentElement.scrollTop ；<br>
Chrome：<br>
谷歌浏览器只认识document.body.scrollTop;</p>
<p>#总结：<br>
两者同时存在时只有一个值生效 另一个值为0<br>
故 var sTop=document.body.scrollTop+document.documentElement.scrollTop;<br>
或 var sTop=document.body.scrollTop||document.documentElement.scrollTop;</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[css relative和absolute]]></title>
        <id>https://huyifu.github.io/post/css-relative-he-absolute/</id>
        <link href="https://huyifu.github.io/post/css-relative-he-absolute/">
        </link>
        <updated>2021-03-07T02:07:41.000Z</updated>
        <content type="html"><![CDATA[<p>1</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[css height width  auto和100% ]]></title>
        <id>https://huyifu.github.io/post/css-height-width-auto-he-100/</id>
        <link href="https://huyifu.github.io/post/css-height-width-auto-he-100/">
        </link>
        <updated>2021-03-06T04:21:29.000Z</updated>
        <content type="html"><![CDATA[<p>#两种盒子模型  w3c盒子模型 IE盒子模型<br>
box-sizing ： content-box w3c盒子模型<br>
box-sizing ： border-box IE盒子模型<br>
可视width（height） = content + padding + border +margin</p>
<ul>
<li>w3c盒子模型 width（height） = content</li>
<li>IE盒子模型 width（height） = content + padding + border</li>
</ul>
<p>#width (height )100%<br>
height width百分数是相对于包含块的。<br>
如果没有显示声明包含块的height，百分数高度会重置为auto。  ——《css权威指南》</p>
<ul>
<li>%设定宽高是根据父级宽高来定</li>
<li>width height 没有设置 默认auto</li>
<li></li>
</ul>
<p>margin 0 auto 为何居中</p>
<p>未完。。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[ES6 let命令 和const命令]]></title>
        <id>https://huyifu.github.io/post/es6-let-ming-ling/</id>
        <link href="https://huyifu.github.io/post/es6-let-ming-ling/">
        </link>
        <updated>2021-03-04T11:43:43.000Z</updated>
        <content type="html"><![CDATA[<p><strong>let类似var 不过声明的变量只在let命令下的代码块生效</strong></p>
<pre><code>var a = [];
for (var i = 0; i &lt; 10; i++) {
  a[i] = function () {
    console.log(i);
  };
}
a[6](); // 10  a为函数数组 var 在（）创建的变量 会存在于循环外部的执行环境中 故输出10
for (let i = 0; i &lt; 10; i++) {
    a[i] = function () {
      console.log(i);
    };
  }
a[6](); // 6  let 块级作用域 每一轮i变量重新声明 并由于js引擎内部记忆上一轮的值 计算后赋值
</code></pre>
<blockquote>
<p>for循环还有一个特别之处，就是设置循环变量的那部分是一个父作用域，而循环体内部是一个单独的子作用域。</p>
</blockquote>
<p>以下为代码实践证明</p>
<pre><code>for (let i = 0; i &lt; 5; i++) {
    i++; //let不声明i 开始影响（）里声明的i变量 子作用域影响父作用域
    console.log(i);
  }
//输出1 3 5
  for (let i = 0; i &lt; 5; i++) {
    let i=10; //let声明i 单独的子作用域 
    console.log(i);
  }
//输出5遍10
</code></pre>
<p><strong>var存在变量提升  let不存在</strong><br>
变量提升</p>
<ul>
<li>var关键字声明的变量，无论实际声明的位置在何处，都会被视为声明在函数的顶部（如果声明不在任意函数内，则视为在全局作用域的顶部）</li>
<li>JavaScript引擎的工作方式是，先预解析代码， 获取所有被声明的变量和函数声明，然后再一行一行地运行，这就使所有变量声明的语句，都会被提升到代码的头部，这就是变量提升</li>
</ul>
<pre><code>// var 的情况
console.log(foo); // 输出undefined
var foo = 2;

// let 的情况
console.log(bar); // 报错ReferenceError
let bar = 2;
</code></pre>
<p><strong>暂时性死区</strong><br>
用let声明变量之前，该变量不可用</p>
<ul>
<li>typeof 不是百分百不报错 ——</li>
</ul>
<pre><code>typeof x; //ReferenceError
let x;
</code></pre>
<ul>
<li>let与var</li>
</ul>
<pre><code>var  x = x;//不报错
let   x = x;//报错
</code></pre>
<p><strong>const</strong></p>
<ul>
<li>声明常量（不变） 所以后必须马上赋值</li>
<li>块级作用域有效</li>
<li>暂时性死区</li>
<li>不可重复声明</li>
<li>对象冻结，应该使用Object.freeze方法。<br>
保证常量值不改变本质是<strong>防止变量所指向内存的地址内数据进行更改</strong><br>
简单的数据类型可以保证不改变<br>
而对于复合型（数组和对象）则只能保证变量存放的指针不变 指向的数据结构内部无法控制</li>
</ul>
<pre><code>const a = [];
a.push('Hello'); // 可执行
a.length = 0;    // 可执行
a = ['Dave'];    // 报错
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[路径 相对和绝对]]></title>
        <id>https://huyifu.github.io/post/lu-jing-xiang-dui-he-jue-dui/</id>
        <link href="https://huyifu.github.io/post/lu-jing-xiang-dui-he-jue-dui/">
        </link>
        <updated>2021-03-03T12:28:44.000Z</updated>
        <content type="html"><![CDATA[<p><strong>绝对路径</strong><br>
从根目录为起点到你想到到达的目录<br>
<strong>相对路径</strong><br>
以一个基准点(自身)为起点到达你想到达的目录<br>
/ 根目录(基准点的最上层目录) 即windows系统下某个盘<br>
./当前目录  ../上一级目录  (相对的)</p>
<p>例子<br>
c:/website/web/xz/index.html<br>
c:/website/img/images/photo.jpg<br>
在index.html中导入photo.jpg<br>
绝对路径： src=&quot;c:/website/img/images/photo.jpg&quot; (本电脑)<br>
相对路径 :   src=&quot;../../img/images/photo.jpg&quot; (只要保持相对位置就可以使用)</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[更换主题使用markdown语法]]></title>
        <id>https://huyifu.github.io/post/geng-huan-zhu-ti-shi-yong-markdown-yu-fa/</id>
        <link href="https://huyifu.github.io/post/geng-huan-zhu-ti-shi-yong-markdown-yu-fa/">
        </link>
        <updated>2021-03-03T07:11:31.000Z</updated>
        <content type="html"><![CDATA[<!-- more -->
<h1 id="一级标题">一级标题</h1>
<h2 id="二级标题">二级标题</h2>
<p>markdown段落直接<br>
换行</p>
<p>第二段？？<br>
换行==两个空格以上加换行</p>
<p><strong>加粗</strong> <em>斜体</em></p>
<blockquote>
<p>引用</p>
<blockquote>
<p>引用的嵌套</p>
</blockquote>
</blockquote>
<p>有序列表</p>
<ol>
<li>
<p>first item</p>
</li>
<li>
<p>second item</p>
<ol>
<li>a</li>
<li>b
<ol>
<li>三层</li>
<li>嵌套</li>
</ol>
</li>
<li>c</li>
</ol>
</li>
<li>
<p>d</p>
<pre><code>         &lt;html&gt;
   &lt;head&gt;
     &lt;title&gt;代码块&lt;/title&gt;
   &lt;/head&gt;
</code></pre>
</li>
<li>
<p>e</p>
</li>
</ol>
<p>无序列表</p>
<ul>
<li>first item</li>
<li>second item
<ul>
<li>二层</li>
<li>嵌套</li>
</ul>
<blockquote>
<p>四个空格</p>
</blockquote>
</li>
<li>third item</li>
</ul>
<p>分隔线</p>
<hr>
<p>分隔线</p>
<p>链接<br>
<a href="www.hao123.com">链接显示文本</a><br>
网址加链接&lt;&gt;<br>
<a href="https://markdown.com.cn">https://markdown.com.cn</a></p>
<p>图片<br>
<img src="%E5%9B%BE%E7%89%87%E9%93%BE%E6%8E%A5" alt="图片alt" title="图片title" loading="lazy"></p>
<p>This is a regular paragraph.</p>
<table>
    <tr>
        <td>Foo</td>
    </tr>
</table>
<p>This is another regular paragraph.</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[第一篇]]></title>
        <id>https://huyifu.github.io/post/di-yi-pian/</id>
        <link href="https://huyifu.github.io/post/di-yi-pian/">
        </link>
        <updated>2021-03-02T13:39:37.000Z</updated>
        <content type="html"><![CDATA[<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>